Contract PoolFactory (
    admin: Address,
    poolTemplate: ByteVec,
    alpacaPoolTemplate: ByteVec,
    comissionRate: U256
) {
    event Deposit (
        who: Address,
        pair: ByteVec,
        token: ByteVec,
        amount: U256
    )
    event Withdraw (
        who: Address,
        pair: ByteVec,
        token: ByteVec,
        amount: U256
    )
    event CollateralAdded (
        who: Address,
        pair: ByteVec,
        collateral: ByteVec,
        amount: U256
    )
    event Borrow (
        who: Address, 
        pair: ByteVec,
        path: ByteVec,
        token: ByteVec, 
        amount: U256
    )
    event Repay (
        who: Address,
        pair: ByteVec,
        path: ByteVec,
        remaining: U256,
        token: ByteVec,
        amount: U256
    )
    event Liquidate (
        who: Address,
        pair: ByteVec,
        collateral: ByteVec,
        collateralAmount: U256,
        token: ByteVec,
        tokenAmount: U256,
        timeToEnd: U256,
        auction: ByteVec
    )

    // create pool


    // deposit
    @using(checkExternalCaller = false, preapprovedAssets = true, assetsInContract = enforced, updateFields = true)
    pub fn deposit(pair: ByteVec, amount: U256) -> () {
        let pool = Pool(subContractId!(pair))

        let caller = callerAddress!()

        let token = pool.getPoolToken()

        pool.deposit{caller -> token: amount}(caller, amount)

        // sTokens recieved
        emit Deposit(
            caller, 
            pair, 
            token, 
            amount
        )
    }

    // withdraw
    @using(checkExternalCaller = false, preapprovedAssets = true, assetsInContract = enforced, updateFields = true)
    pub fn withdraw(pair: ByteVec, amount: U256) -> () {
        let pool = Pool(subContractId!(pair))

        let caller = callerAddress!()

        let token = pool.getSPoolToken()

        //! this will need to be edited  
        pool.withdraw{callerAddress!() -> token: amount}(caller, amount)

        // token recieved
        emit Withdraw(
            caller, 
            pair, 
            token, 
            amount
        )
    }

    // borrow -> borrow (create loan + mapping)
    @using(checkExternalCaller = false, preapprovedAssets = true, assetsInContract = enforced, updateFields = true)
    pub fn borrow(pair: ByteVec, amount: U256) -> () {
        let pool = Pool(subContractId!(pair))

        let caller = callerAddress!()
        let time = blockTimeStamp!()

        // get token
        let collateral = pool.getPoolToken()

        // calculate collateral required for loan
        // .. code

        pool.borrow{callerAddress!() -> collateral: amount}(caller, amount, encodeToByteVec!(caller, time))

        emit Borrow(
            caller,
            pair,
            encodeToByteVec!(caller, time),
            collateral,
            amount
        )
    }

    // repay
    @using(checkExternalCaller = false, preapprovedAssets = true, assetsInContract = false, updateFields = true)
    pub fn repay(pair: ByteVec, path: ByteVec, amount: U256) -> () {
        let pool = Pool(subContractId!(pair))

        let caller = callerAddress!()

        let token = pool.getPoolToken()

        // calculate repayment
        // .. code

        let remaining = pool.repay{caller -> token: amount}(caller, path, amount)

        emit Repay (
            caller,
            pair,
            path,
            remaining,
            token,
            amount
        )
    }

    @using(checkExternalCaller = false, preapprovedAssets = false, assetsInContract = enforced, updateFields = true)
    pub fn liquidate(pair: ByteVec, path: ByteVec) -> () {
        let pool = Pool(subContractId!(pair))

        let caller = callerAddress!()

        // get pool tokens
        let (token, collateral) = pool.getPoolTokens()

        let (
            tokenAmount, 
            collateralAmount, 
            timeToEnd,
            auction
        ) = pool.liquidate(caller, path)

        emit Liquidate (
            caller,
            pair,
            collateral,
            collateralAmount,
            token,
            tokenAmount,
            timeToEnd,
            auction
        )
    }
}