/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as PoolContractJson } from "../pool/Pool.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import {
  CollateralInfo,
  DIAOracleValue,
  LoanInfo,
  OracleData,
  PairInfo,
  AllStructs,
} from "./types";
import { RalphMap } from "@alephium/web3";

// Custom types for the contract
export namespace PoolTypes {
  export type Fields = {
    poolToken: HexString;
    poolDecimals: bigint;
    poolPair: HexString;
    collateralToken: HexString;
    collateralDecimals: bigint;
    collateralPair: HexString;
    exchangeRate: bigint;
    sPoolSupply: bigint;
    totalDeposits: bigint;
    totalBorrowed: bigint;
    collateralFactor: bigint;
    interestRate: bigint;
    oracle: HexString;
  };

  export type State = ContractState<Fields>;

  export type DepositedEvent = ContractEvent<{ who: Address; amount: bigint }>;
  export type WithdrawnEvent = ContractEvent<{ who: Address; amount: bigint }>;
  export type BorrowedEvent = ContractEvent<{
    who: Address;
    amount: bigint;
    collateralAmount: bigint;
  }>;
  export type RepaidEvent = ContractEvent<{ who: Address; amount: bigint }>;
  export type LiquidatedEvent = ContractEvent<{
    who: Address;
    liquidator: Address;
  }>;

  export interface CallMethodTable {
    getSymbol: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getName: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getDecimals: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getTotalSupply: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getPoolTokens: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<[HexString, HexString]>;
    };
    updateExchangeRate: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    updateInterestRate: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    determineCollateralRatio: {
      params: CallContractParams<{
        tokenAmount: bigint;
        collateralAmount: bigint;
        threshhold: bigint;
      }>;
      result: CallContractResult<bigint>;
    };
    determineCollateralAmount: {
      params: CallContractParams<{ tokenAmount: bigint; desiredRatio: bigint }>;
      result: CallContractResult<bigint>;
    };
    deposit: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    withdraw: {
      params: CallContractParams<{ sPoolAmount: bigint }>;
      result: CallContractResult<null>;
    };
    depositCollateral: {
      params: CallContractParams<{ amount: bigint }>;
      result: CallContractResult<null>;
    };
    borrow: {
      params: CallContractParams<{
        caller: Address;
        amount: bigint;
        path: HexString;
      }>;
      result: CallContractResult<null>;
    };
    liquidate: {
      params: CallContractParams<{ caller: Address; path: HexString }>;
      result: CallContractResult<null>;
    };
    repay: {
      params: CallContractParams<{ path: HexString }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getSymbol: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getName: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getDecimals: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getTotalSupply: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getPoolTokens: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    updateExchangeRate: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    updateInterestRate: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    determineCollateralRatio: {
      params: SignExecuteContractMethodParams<{
        tokenAmount: bigint;
        collateralAmount: bigint;
        threshhold: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    determineCollateralAmount: {
      params: SignExecuteContractMethodParams<{
        tokenAmount: bigint;
        desiredRatio: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    deposit: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    withdraw: {
      params: SignExecuteContractMethodParams<{ sPoolAmount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    depositCollateral: {
      params: SignExecuteContractMethodParams<{ amount: bigint }>;
      result: SignExecuteScriptTxResult;
    };
    borrow: {
      params: SignExecuteContractMethodParams<{
        caller: Address;
        amount: bigint;
        path: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    liquidate: {
      params: SignExecuteContractMethodParams<{
        caller: Address;
        path: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
    repay: {
      params: SignExecuteContractMethodParams<{ path: HexString }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];

  export type Maps = {
    loans?: Map<HexString, LoanInfo>;
    collateral?: Map<Address, CollateralInfo>;
  };
}

class Factory extends ContractFactory<PoolInstance, PoolTypes.Fields> {
  encodeFields(fields: PoolTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = {
    Deposited: 0,
    Withdrawn: 1,
    Borrowed: 2,
    Repaid: 3,
    Liquidated: 4,
  };
  consts = {
    PoolCodes: {
      CannotDepositZero: BigInt("0"),
      CannotBorrowZero: BigInt("1"),
      InsuffcientLiquidity: BigInt("2"),
      InsuffcientCollateral: BigInt("3"),
      NoActiveLoan: BigInt("4"),
    },
  };

  at(address: string): PoolInstance {
    return new PoolInstance(address);
  }

  tests = {
    getSymbol: async (
      params: Omit<
        TestContractParams<PoolTypes.Fields, never, PoolTypes.Maps>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString, PoolTypes.Maps>> => {
      return testMethod(this, "getSymbol", params, getContractByCodeHash);
    },
    getName: async (
      params: Omit<
        TestContractParams<PoolTypes.Fields, never, PoolTypes.Maps>,
        "testArgs"
      >
    ): Promise<TestContractResult<HexString, PoolTypes.Maps>> => {
      return testMethod(this, "getName", params, getContractByCodeHash);
    },
    getDecimals: async (
      params: Omit<
        TestContractParams<PoolTypes.Fields, never, PoolTypes.Maps>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint, PoolTypes.Maps>> => {
      return testMethod(this, "getDecimals", params, getContractByCodeHash);
    },
    getTotalSupply: async (
      params: Omit<
        TestContractParams<PoolTypes.Fields, never, PoolTypes.Maps>,
        "testArgs"
      >
    ): Promise<TestContractResult<bigint, PoolTypes.Maps>> => {
      return testMethod(this, "getTotalSupply", params, getContractByCodeHash);
    },
    getPoolTokens: async (
      params: Omit<
        TestContractParams<PoolTypes.Fields, never, PoolTypes.Maps>,
        "testArgs"
      >
    ): Promise<TestContractResult<[HexString, HexString], PoolTypes.Maps>> => {
      return testMethod(this, "getPoolTokens", params, getContractByCodeHash);
    },
    updateExchangeRate: async (
      params: Omit<
        TestContractParams<PoolTypes.Fields, never, PoolTypes.Maps>,
        "testArgs"
      >
    ): Promise<TestContractResult<null, PoolTypes.Maps>> => {
      return testMethod(
        this,
        "updateExchangeRate",
        params,
        getContractByCodeHash
      );
    },
    updateInterestRate: async (
      params: Omit<
        TestContractParams<PoolTypes.Fields, never, PoolTypes.Maps>,
        "testArgs"
      >
    ): Promise<TestContractResult<null, PoolTypes.Maps>> => {
      return testMethod(
        this,
        "updateInterestRate",
        params,
        getContractByCodeHash
      );
    },
    determineCollateralRatio: async (
      params: TestContractParams<
        PoolTypes.Fields,
        { tokenAmount: bigint; collateralAmount: bigint; threshhold: bigint },
        PoolTypes.Maps
      >
    ): Promise<TestContractResult<bigint, PoolTypes.Maps>> => {
      return testMethod(
        this,
        "determineCollateralRatio",
        params,
        getContractByCodeHash
      );
    },
    determineCollateralAmount: async (
      params: TestContractParams<
        PoolTypes.Fields,
        { tokenAmount: bigint; desiredRatio: bigint },
        PoolTypes.Maps
      >
    ): Promise<TestContractResult<bigint, PoolTypes.Maps>> => {
      return testMethod(
        this,
        "determineCollateralAmount",
        params,
        getContractByCodeHash
      );
    },
    deposit: async (
      params: TestContractParams<
        PoolTypes.Fields,
        { amount: bigint },
        PoolTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolTypes.Maps>> => {
      return testMethod(this, "deposit", params, getContractByCodeHash);
    },
    withdraw: async (
      params: TestContractParams<
        PoolTypes.Fields,
        { sPoolAmount: bigint },
        PoolTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolTypes.Maps>> => {
      return testMethod(this, "withdraw", params, getContractByCodeHash);
    },
    depositCollateral: async (
      params: TestContractParams<
        PoolTypes.Fields,
        { amount: bigint },
        PoolTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolTypes.Maps>> => {
      return testMethod(
        this,
        "depositCollateral",
        params,
        getContractByCodeHash
      );
    },
    borrow: async (
      params: TestContractParams<
        PoolTypes.Fields,
        { caller: Address; amount: bigint; path: HexString },
        PoolTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolTypes.Maps>> => {
      return testMethod(this, "borrow", params, getContractByCodeHash);
    },
    liquidate: async (
      params: TestContractParams<
        PoolTypes.Fields,
        { caller: Address; path: HexString },
        PoolTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolTypes.Maps>> => {
      return testMethod(this, "liquidate", params, getContractByCodeHash);
    },
    repay: async (
      params: TestContractParams<
        PoolTypes.Fields,
        { path: HexString },
        PoolTypes.Maps
      >
    ): Promise<TestContractResult<null, PoolTypes.Maps>> => {
      return testMethod(this, "repay", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: PoolTypes.Fields,
    asset?: Asset,
    address?: string,
    maps?: PoolTypes.Maps
  ) {
    return this.stateForTest_(initFields, asset, address, maps);
  }
}

// Use this object to test and deploy the contract
export const Pool = new Factory(
  Contract.fromJson(
    PoolContractJson,
    "=44-2+e2=2-4+c=1-1=2+3=1-1+45c5=1173-1+a=180-2+11=54+7a7e0214696e73657274206174206d617020706174683a2000=29-1+c=330+7a7e0214696e73657274206174206d617020706174683a2000=89-1+4=405-1+c=40+7a7e021472656d6f7665206174206d617020706174683a2000=122+7a7e021472656d6f7665206174206d617020706174683a2000=49-1+6=186+7a7e021472656d6f7665206174206d617020706174683a2000=40",
    "a037701b292bb8ffd210ea19eeb4517010f5072e4c3e45c073d09951185f159c",
    AllStructs
  )
);
registerContract(Pool);

// Use this class to interact with the blockchain
export class PoolInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  maps = {
    loans: new RalphMap<HexString, LoanInfo>(
      Pool.contract,
      this.contractId,
      "loans"
    ),
    collateral: new RalphMap<Address, CollateralInfo>(
      Pool.contract,
      this.contractId,
      "collateral"
    ),
  };

  async fetchState(): Promise<PoolTypes.State> {
    return fetchContractState(Pool, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeDepositedEvent(
    options: EventSubscribeOptions<PoolTypes.DepositedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Pool.contract,
      this,
      options,
      "Deposited",
      fromCount
    );
  }

  subscribeWithdrawnEvent(
    options: EventSubscribeOptions<PoolTypes.WithdrawnEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Pool.contract,
      this,
      options,
      "Withdrawn",
      fromCount
    );
  }

  subscribeBorrowedEvent(
    options: EventSubscribeOptions<PoolTypes.BorrowedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Pool.contract,
      this,
      options,
      "Borrowed",
      fromCount
    );
  }

  subscribeRepaidEvent(
    options: EventSubscribeOptions<PoolTypes.RepaidEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Pool.contract,
      this,
      options,
      "Repaid",
      fromCount
    );
  }

  subscribeLiquidatedEvent(
    options: EventSubscribeOptions<PoolTypes.LiquidatedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      Pool.contract,
      this,
      options,
      "Liquidated",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | PoolTypes.DepositedEvent
      | PoolTypes.WithdrawnEvent
      | PoolTypes.BorrowedEvent
      | PoolTypes.RepaidEvent
      | PoolTypes.LiquidatedEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(Pool.contract, this, options, fromCount);
  }

  view = {
    getSymbol: async (
      params?: PoolTypes.CallMethodParams<"getSymbol">
    ): Promise<PoolTypes.CallMethodResult<"getSymbol">> => {
      return callMethod(
        Pool,
        this,
        "getSymbol",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getName: async (
      params?: PoolTypes.CallMethodParams<"getName">
    ): Promise<PoolTypes.CallMethodResult<"getName">> => {
      return callMethod(
        Pool,
        this,
        "getName",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDecimals: async (
      params?: PoolTypes.CallMethodParams<"getDecimals">
    ): Promise<PoolTypes.CallMethodResult<"getDecimals">> => {
      return callMethod(
        Pool,
        this,
        "getDecimals",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getTotalSupply: async (
      params?: PoolTypes.CallMethodParams<"getTotalSupply">
    ): Promise<PoolTypes.CallMethodResult<"getTotalSupply">> => {
      return callMethod(
        Pool,
        this,
        "getTotalSupply",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getPoolTokens: async (
      params?: PoolTypes.CallMethodParams<"getPoolTokens">
    ): Promise<PoolTypes.CallMethodResult<"getPoolTokens">> => {
      return callMethod(
        Pool,
        this,
        "getPoolTokens",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    updateExchangeRate: async (
      params?: PoolTypes.CallMethodParams<"updateExchangeRate">
    ): Promise<PoolTypes.CallMethodResult<"updateExchangeRate">> => {
      return callMethod(
        Pool,
        this,
        "updateExchangeRate",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    updateInterestRate: async (
      params?: PoolTypes.CallMethodParams<"updateInterestRate">
    ): Promise<PoolTypes.CallMethodResult<"updateInterestRate">> => {
      return callMethod(
        Pool,
        this,
        "updateInterestRate",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    determineCollateralRatio: async (
      params: PoolTypes.CallMethodParams<"determineCollateralRatio">
    ): Promise<PoolTypes.CallMethodResult<"determineCollateralRatio">> => {
      return callMethod(
        Pool,
        this,
        "determineCollateralRatio",
        params,
        getContractByCodeHash
      );
    },
    determineCollateralAmount: async (
      params: PoolTypes.CallMethodParams<"determineCollateralAmount">
    ): Promise<PoolTypes.CallMethodResult<"determineCollateralAmount">> => {
      return callMethod(
        Pool,
        this,
        "determineCollateralAmount",
        params,
        getContractByCodeHash
      );
    },
    deposit: async (
      params: PoolTypes.CallMethodParams<"deposit">
    ): Promise<PoolTypes.CallMethodResult<"deposit">> => {
      return callMethod(Pool, this, "deposit", params, getContractByCodeHash);
    },
    withdraw: async (
      params: PoolTypes.CallMethodParams<"withdraw">
    ): Promise<PoolTypes.CallMethodResult<"withdraw">> => {
      return callMethod(Pool, this, "withdraw", params, getContractByCodeHash);
    },
    depositCollateral: async (
      params: PoolTypes.CallMethodParams<"depositCollateral">
    ): Promise<PoolTypes.CallMethodResult<"depositCollateral">> => {
      return callMethod(
        Pool,
        this,
        "depositCollateral",
        params,
        getContractByCodeHash
      );
    },
    borrow: async (
      params: PoolTypes.CallMethodParams<"borrow">
    ): Promise<PoolTypes.CallMethodResult<"borrow">> => {
      return callMethod(Pool, this, "borrow", params, getContractByCodeHash);
    },
    liquidate: async (
      params: PoolTypes.CallMethodParams<"liquidate">
    ): Promise<PoolTypes.CallMethodResult<"liquidate">> => {
      return callMethod(Pool, this, "liquidate", params, getContractByCodeHash);
    },
    repay: async (
      params: PoolTypes.CallMethodParams<"repay">
    ): Promise<PoolTypes.CallMethodResult<"repay">> => {
      return callMethod(Pool, this, "repay", params, getContractByCodeHash);
    },
  };

  transact = {
    getSymbol: async (
      params: PoolTypes.SignExecuteMethodParams<"getSymbol">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getSymbol">> => {
      return signExecuteMethod(Pool, this, "getSymbol", params);
    },
    getName: async (
      params: PoolTypes.SignExecuteMethodParams<"getName">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getName">> => {
      return signExecuteMethod(Pool, this, "getName", params);
    },
    getDecimals: async (
      params: PoolTypes.SignExecuteMethodParams<"getDecimals">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getDecimals">> => {
      return signExecuteMethod(Pool, this, "getDecimals", params);
    },
    getTotalSupply: async (
      params: PoolTypes.SignExecuteMethodParams<"getTotalSupply">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getTotalSupply">> => {
      return signExecuteMethod(Pool, this, "getTotalSupply", params);
    },
    getPoolTokens: async (
      params: PoolTypes.SignExecuteMethodParams<"getPoolTokens">
    ): Promise<PoolTypes.SignExecuteMethodResult<"getPoolTokens">> => {
      return signExecuteMethod(Pool, this, "getPoolTokens", params);
    },
    updateExchangeRate: async (
      params: PoolTypes.SignExecuteMethodParams<"updateExchangeRate">
    ): Promise<PoolTypes.SignExecuteMethodResult<"updateExchangeRate">> => {
      return signExecuteMethod(Pool, this, "updateExchangeRate", params);
    },
    updateInterestRate: async (
      params: PoolTypes.SignExecuteMethodParams<"updateInterestRate">
    ): Promise<PoolTypes.SignExecuteMethodResult<"updateInterestRate">> => {
      return signExecuteMethod(Pool, this, "updateInterestRate", params);
    },
    determineCollateralRatio: async (
      params: PoolTypes.SignExecuteMethodParams<"determineCollateralRatio">
    ): Promise<
      PoolTypes.SignExecuteMethodResult<"determineCollateralRatio">
    > => {
      return signExecuteMethod(Pool, this, "determineCollateralRatio", params);
    },
    determineCollateralAmount: async (
      params: PoolTypes.SignExecuteMethodParams<"determineCollateralAmount">
    ): Promise<
      PoolTypes.SignExecuteMethodResult<"determineCollateralAmount">
    > => {
      return signExecuteMethod(Pool, this, "determineCollateralAmount", params);
    },
    deposit: async (
      params: PoolTypes.SignExecuteMethodParams<"deposit">
    ): Promise<PoolTypes.SignExecuteMethodResult<"deposit">> => {
      return signExecuteMethod(Pool, this, "deposit", params);
    },
    withdraw: async (
      params: PoolTypes.SignExecuteMethodParams<"withdraw">
    ): Promise<PoolTypes.SignExecuteMethodResult<"withdraw">> => {
      return signExecuteMethod(Pool, this, "withdraw", params);
    },
    depositCollateral: async (
      params: PoolTypes.SignExecuteMethodParams<"depositCollateral">
    ): Promise<PoolTypes.SignExecuteMethodResult<"depositCollateral">> => {
      return signExecuteMethod(Pool, this, "depositCollateral", params);
    },
    borrow: async (
      params: PoolTypes.SignExecuteMethodParams<"borrow">
    ): Promise<PoolTypes.SignExecuteMethodResult<"borrow">> => {
      return signExecuteMethod(Pool, this, "borrow", params);
    },
    liquidate: async (
      params: PoolTypes.SignExecuteMethodParams<"liquidate">
    ): Promise<PoolTypes.SignExecuteMethodResult<"liquidate">> => {
      return signExecuteMethod(Pool, this, "liquidate", params);
    },
    repay: async (
      params: PoolTypes.SignExecuteMethodParams<"repay">
    ): Promise<PoolTypes.SignExecuteMethodResult<"repay">> => {
      return signExecuteMethod(Pool, this, "repay", params);
    },
  };

  async multicall<Calls extends PoolTypes.MultiCallParams>(
    calls: Calls
  ): Promise<PoolTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends PoolTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<PoolTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends PoolTypes.MultiCallParams | PoolTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(Pool, this, callss, getContractByCodeHash);
  }
}
