/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as PriceFetcherContractJson } from "../oracle/PriceFetcher.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { DIAOracleValue, OracleData, PairInfo, AllStructs } from "./types";

// Custom types for the contract
export namespace PriceFetcherTypes {
  export type Fields = {
    oracle: HexString;
    btcPrice: bigint;
    wbtcPrice: bigint;
    ethPrice: bigint;
    usdcPrice: bigint;
    alphPrice: bigint;
    ayinPrice: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    update: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    update: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  PriceFetcherInstance,
  PriceFetcherTypes.Fields
> {
  encodeFields(fields: PriceFetcherTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  at(address: string): PriceFetcherInstance {
    return new PriceFetcherInstance(address);
  }

  tests = {
    update: async (
      params: Omit<
        TestContractParamsWithoutMaps<PriceFetcherTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "update", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: PriceFetcherTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const PriceFetcher = new Factory(
  Contract.fromJson(
    PriceFetcherContractJson,
    "",
    "645783c74cf42cd5988ccee598d40818f10b8a7d8c1cb092cbdd7ecdcd99065f",
    AllStructs
  )
);
registerContract(PriceFetcher);

// Use this class to interact with the blockchain
export class PriceFetcherInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<PriceFetcherTypes.State> {
    return fetchContractState(PriceFetcher, this);
  }

  view = {
    update: async (
      params?: PriceFetcherTypes.CallMethodParams<"update">
    ): Promise<PriceFetcherTypes.CallMethodResult<"update">> => {
      return callMethod(
        PriceFetcher,
        this,
        "update",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    update: async (
      params: PriceFetcherTypes.SignExecuteMethodParams<"update">
    ): Promise<PriceFetcherTypes.SignExecuteMethodResult<"update">> => {
      return signExecuteMethod(PriceFetcher, this, "update", params);
    },
  };
}
