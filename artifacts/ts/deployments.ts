/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  RunScriptResult,
  DeployContractExecutionResult,
  NetworkId,
} from "@alephium/web3";
import {
  AlpacaFiOracle,
  AlpacaFiOracleInstance,
  Loan,
  LoanInstance,
  LoanFactory,
  LoanFactoryInstance,
  Auction,
  AuctionInstance,
  AuctionFactory,
  AuctionFactoryInstance,
  Fee,
  FeeInstance,
  TokenTest,
  TokenTestInstance,
  Debt,
  DebtInstance,
  Pool,
  PoolInstance,
} from ".";
import { default as mainnetDeployments } from "../../deployments/.deployments.mainnet.json";
import { default as testnetDeployments } from "../../deployments/.deployments.testnet.json";

export type Deployments = {
  deployerAddress: string;
  contracts: {
    AlpacaFiOracle?: DeployContractExecutionResult<AlpacaFiOracleInstance>;
    Loan?: DeployContractExecutionResult<LoanInstance>;
    LoanFactory?: DeployContractExecutionResult<LoanFactoryInstance>;
    Auction?: DeployContractExecutionResult<AuctionInstance>;
    AuctionFactory?: DeployContractExecutionResult<AuctionFactoryInstance>;
    Fee?: DeployContractExecutionResult<FeeInstance>;
    TokenTest?: DeployContractExecutionResult<TokenTestInstance>;
    Debt?: DeployContractExecutionResult<DebtInstance>;
    Pool?: DeployContractExecutionResult<PoolInstance>;
  };
};

function toDeployments(json: any): Deployments {
  const contracts = {
    AlpacaFiOracle:
      json.contracts["AlpacaFiOracle"] === undefined
        ? undefined
        : {
            ...json.contracts["AlpacaFiOracle"],
            contractInstance: AlpacaFiOracle.at(
              json.contracts["AlpacaFiOracle"].contractInstance.address
            ),
          },
    Loan:
      json.contracts["Loan"] === undefined
        ? undefined
        : {
            ...json.contracts["Loan"],
            contractInstance: Loan.at(
              json.contracts["Loan"].contractInstance.address
            ),
          },
    LoanFactory:
      json.contracts["LoanFactory"] === undefined
        ? undefined
        : {
            ...json.contracts["LoanFactory"],
            contractInstance: LoanFactory.at(
              json.contracts["LoanFactory"].contractInstance.address
            ),
          },
    Auction:
      json.contracts["Auction"] === undefined
        ? undefined
        : {
            ...json.contracts["Auction"],
            contractInstance: Auction.at(
              json.contracts["Auction"].contractInstance.address
            ),
          },
    AuctionFactory:
      json.contracts["AuctionFactory"] === undefined
        ? undefined
        : {
            ...json.contracts["AuctionFactory"],
            contractInstance: AuctionFactory.at(
              json.contracts["AuctionFactory"].contractInstance.address
            ),
          },
    Fee:
      json.contracts["Fee"] === undefined
        ? undefined
        : {
            ...json.contracts["Fee"],
            contractInstance: Fee.at(
              json.contracts["Fee"].contractInstance.address
            ),
          },
    TokenTest:
      json.contracts["TokenTest"] === undefined
        ? undefined
        : {
            ...json.contracts["TokenTest"],
            contractInstance: TokenTest.at(
              json.contracts["TokenTest"].contractInstance.address
            ),
          },
    Debt:
      json.contracts["Debt"] === undefined
        ? undefined
        : {
            ...json.contracts["Debt"],
            contractInstance: Debt.at(
              json.contracts["Debt"].contractInstance.address
            ),
          },
    Pool:
      json.contracts["Pool"] === undefined
        ? undefined
        : {
            ...json.contracts["Pool"],
            contractInstance: Pool.at(
              json.contracts["Pool"].contractInstance.address
            ),
          },
  };
  return {
    ...json,
    contracts: contracts as Deployments["contracts"],
  };
}

export function loadDeployments(
  networkId: NetworkId,
  deployerAddress?: string
): Deployments {
  const deployments =
    networkId === "mainnet"
      ? mainnetDeployments
      : networkId === "testnet"
      ? testnetDeployments
      : undefined;
  if (deployments === undefined) {
    throw Error("The contract has not been deployed to the " + networkId);
  }
  const allDeployments: any[] = Array.isArray(deployments)
    ? deployments
    : [deployments];
  if (deployerAddress === undefined) {
    if (allDeployments.length > 1) {
      throw Error(
        "The contract has been deployed multiple times on " +
          networkId +
          ", please specify the deployer address"
      );
    } else {
      return toDeployments(allDeployments[0]);
    }
  }
  const result = allDeployments.find(
    (d) => d.deployerAddress === deployerAddress
  );
  if (result === undefined) {
    throw Error("The contract deployment result does not exist");
  }
  return toDeployments(result);
}
