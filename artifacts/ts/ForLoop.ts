/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as ForLoopContractJson } from "../test-contracts/ForLoop.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import {
  DIAOracleValue,
  OracleData,
  PairInfo,
  TokenData,
  AllStructs,
} from "./types";

// Custom types for the contract
export namespace ForLoopTypes {
  export type Fields = {
    targetValue: bigint;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    cycle: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    cycle: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<ForLoopInstance, ForLoopTypes.Fields> {
  encodeFields(fields: ForLoopTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  at(address: string): ForLoopInstance {
    return new ForLoopInstance(address);
  }

  tests = {
    cycle: async (
      params: Omit<
        TestContractParamsWithoutMaps<ForLoopTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "cycle", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: ForLoopTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const ForLoop = new Factory(
  Contract.fromJson(
    ForLoopContractJson,
    "",
    "1983fca312f9f295509368b876398db40ae2e88ea57e61e24f4679eaf134df87",
    AllStructs
  )
);
registerContract(ForLoop);

// Use this class to interact with the blockchain
export class ForLoopInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<ForLoopTypes.State> {
    return fetchContractState(ForLoop, this);
  }

  view = {
    cycle: async (
      params?: ForLoopTypes.CallMethodParams<"cycle">
    ): Promise<ForLoopTypes.CallMethodResult<"cycle">> => {
      return callMethod(
        ForLoop,
        this,
        "cycle",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    cycle: async (
      params: ForLoopTypes.SignExecuteMethodParams<"cycle">
    ): Promise<ForLoopTypes.SignExecuteMethodResult<"cycle">> => {
      return signExecuteMethod(ForLoop, this, "cycle", params);
    },
  };
}
