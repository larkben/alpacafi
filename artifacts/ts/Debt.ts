/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as DebtContractJson } from "../pool-lending/Debt.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import { DIAOracleValue, OracleData, PairInfo, AllStructs } from "./types";

// Custom types for the contract
export namespace DebtTypes {
  export type Fields = {
    debtor: Address;
    loanAmount: bigint;
    collateralAmount: bigint;
    timeCreated: bigint;
    interestRate: bigint;
    parentContract: Address;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getLoanAmount: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getCollateralAmount: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getDebtor: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    getParentAddress: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<Address>;
    };
    calculateRepayment: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    destroyDebt: {
      params: CallContractParams<{ caller: Address }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getLoanAmount: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getCollateralAmount: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getDebtor: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getParentAddress: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    calculateRepayment: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    destroyDebt: {
      params: SignExecuteContractMethodParams<{ caller: Address }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<DebtInstance, DebtTypes.Fields> {
  encodeFields(fields: DebtTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  at(address: string): DebtInstance {
    return new DebtInstance(address);
  }

  tests = {
    getLoanAmount: async (
      params: Omit<
        TestContractParamsWithoutMaps<DebtTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getLoanAmount", params, getContractByCodeHash);
    },
    getCollateralAmount: async (
      params: Omit<
        TestContractParamsWithoutMaps<DebtTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getCollateralAmount",
        params,
        getContractByCodeHash
      );
    },
    getDebtor: async (
      params: Omit<
        TestContractParamsWithoutMaps<DebtTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(this, "getDebtor", params, getContractByCodeHash);
    },
    getParentAddress: async (
      params: Omit<
        TestContractParamsWithoutMaps<DebtTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<Address>> => {
      return testMethod(
        this,
        "getParentAddress",
        params,
        getContractByCodeHash
      );
    },
    calculateRepayment: async (
      params: Omit<
        TestContractParamsWithoutMaps<DebtTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "calculateRepayment",
        params,
        getContractByCodeHash
      );
    },
    destroyDebt: async (
      params: TestContractParamsWithoutMaps<
        DebtTypes.Fields,
        { caller: Address }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "destroyDebt", params, getContractByCodeHash);
    },
  };

  stateForTest(initFields: DebtTypes.Fields, asset?: Asset, address?: string) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const Debt = new Factory(
  Contract.fromJson(
    DebtContractJson,
    "",
    "dc777020d97731f0a9e4a0284f0b71548f1c648adceb1260590d49d2e4bff563",
    AllStructs
  )
);
registerContract(Debt);

// Use this class to interact with the blockchain
export class DebtInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<DebtTypes.State> {
    return fetchContractState(Debt, this);
  }

  view = {
    getLoanAmount: async (
      params?: DebtTypes.CallMethodParams<"getLoanAmount">
    ): Promise<DebtTypes.CallMethodResult<"getLoanAmount">> => {
      return callMethod(
        Debt,
        this,
        "getLoanAmount",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getCollateralAmount: async (
      params?: DebtTypes.CallMethodParams<"getCollateralAmount">
    ): Promise<DebtTypes.CallMethodResult<"getCollateralAmount">> => {
      return callMethod(
        Debt,
        this,
        "getCollateralAmount",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getDebtor: async (
      params?: DebtTypes.CallMethodParams<"getDebtor">
    ): Promise<DebtTypes.CallMethodResult<"getDebtor">> => {
      return callMethod(
        Debt,
        this,
        "getDebtor",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getParentAddress: async (
      params?: DebtTypes.CallMethodParams<"getParentAddress">
    ): Promise<DebtTypes.CallMethodResult<"getParentAddress">> => {
      return callMethod(
        Debt,
        this,
        "getParentAddress",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    calculateRepayment: async (
      params?: DebtTypes.CallMethodParams<"calculateRepayment">
    ): Promise<DebtTypes.CallMethodResult<"calculateRepayment">> => {
      return callMethod(
        Debt,
        this,
        "calculateRepayment",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    destroyDebt: async (
      params: DebtTypes.CallMethodParams<"destroyDebt">
    ): Promise<DebtTypes.CallMethodResult<"destroyDebt">> => {
      return callMethod(
        Debt,
        this,
        "destroyDebt",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getLoanAmount: async (
      params: DebtTypes.SignExecuteMethodParams<"getLoanAmount">
    ): Promise<DebtTypes.SignExecuteMethodResult<"getLoanAmount">> => {
      return signExecuteMethod(Debt, this, "getLoanAmount", params);
    },
    getCollateralAmount: async (
      params: DebtTypes.SignExecuteMethodParams<"getCollateralAmount">
    ): Promise<DebtTypes.SignExecuteMethodResult<"getCollateralAmount">> => {
      return signExecuteMethod(Debt, this, "getCollateralAmount", params);
    },
    getDebtor: async (
      params: DebtTypes.SignExecuteMethodParams<"getDebtor">
    ): Promise<DebtTypes.SignExecuteMethodResult<"getDebtor">> => {
      return signExecuteMethod(Debt, this, "getDebtor", params);
    },
    getParentAddress: async (
      params: DebtTypes.SignExecuteMethodParams<"getParentAddress">
    ): Promise<DebtTypes.SignExecuteMethodResult<"getParentAddress">> => {
      return signExecuteMethod(Debt, this, "getParentAddress", params);
    },
    calculateRepayment: async (
      params: DebtTypes.SignExecuteMethodParams<"calculateRepayment">
    ): Promise<DebtTypes.SignExecuteMethodResult<"calculateRepayment">> => {
      return signExecuteMethod(Debt, this, "calculateRepayment", params);
    },
    destroyDebt: async (
      params: DebtTypes.SignExecuteMethodParams<"destroyDebt">
    ): Promise<DebtTypes.SignExecuteMethodResult<"destroyDebt">> => {
      return signExecuteMethod(Debt, this, "destroyDebt", params);
    },
  };

  async multicall<Calls extends DebtTypes.MultiCallParams>(
    calls: Calls
  ): Promise<DebtTypes.MultiCallResults<Calls>>;
  async multicall<Callss extends DebtTypes.MultiCallParams[]>(
    callss: Narrow<Callss>
  ): Promise<DebtTypes.MulticallReturnType<Callss>>;
  async multicall<
    Callss extends DebtTypes.MultiCallParams | DebtTypes.MultiCallParams[]
  >(callss: Callss): Promise<unknown> {
    return await multicallMethods(Debt, this, callss, getContractByCodeHash);
  }
}
