/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
  Narrow,
} from "@alephium/web3";
import { default as PoolFactoryContractJson } from "../pool/PoolFactory.ral.json";
import { getContractByCodeHash, registerContract } from "./contracts";
import {
  CollateralInfo,
  DIAOracleValue,
  LoanInfo,
  OracleData,
  PairInfo,
  AllStructs,
} from "./types";

// Custom types for the contract
export namespace PoolFactoryTypes {
  export type Fields = {
    admin: Address;
    poolTemplate: HexString;
    alpacaPoolTemplate: HexString;
    comissionRate: bigint;
  };

  export type State = ContractState<Fields>;

  export type DepositEvent = ContractEvent<{
    who: Address;
    pair: HexString;
    token: HexString;
    amount: bigint;
  }>;
  export type WithdrawEvent = ContractEvent<{
    who: Address;
    pair: HexString;
    token: HexString;
    amount: bigint;
  }>;
  export type CollateralAddedEvent = ContractEvent<{
    who: Address;
    pair: HexString;
    collateral: HexString;
    amount: bigint;
  }>;
  export type BorrowEvent = ContractEvent<{
    who: Address;
    pair: HexString;
    path: HexString;
    token: HexString;
    amount: bigint;
  }>;
  export type RepayEvent = ContractEvent<{
    who: Address;
    pair: HexString;
    path: HexString;
    remaining: bigint;
    token: HexString;
    amount: bigint;
  }>;
  export type LiquidateEvent = ContractEvent<{
    who: Address;
    pair: HexString;
    collateral: HexString;
    collateralAmount: bigint;
    token: HexString;
    tokenAmount: bigint;
    timeToEnd: bigint;
    auction: HexString;
  }>;

  export interface CallMethodTable {
    deposit: {
      params: CallContractParams<{ pair: HexString; amount: bigint }>;
      result: CallContractResult<null>;
    };
    withdraw: {
      params: CallContractParams<{ pair: HexString; amount: bigint }>;
      result: CallContractResult<null>;
    };
    depositCollateral: {
      params: CallContractParams<{ pair: HexString; amount: bigint }>;
      result: CallContractResult<null>;
    };
    borrow: {
      params: CallContractParams<{ pair: HexString; amount: bigint }>;
      result: CallContractResult<null>;
    };
    repay: {
      params: CallContractParams<{
        pair: HexString;
        path: HexString;
        amount: bigint;
      }>;
      result: CallContractResult<null>;
    };
    liquidate: {
      params: CallContractParams<{ pair: HexString; path: HexString }>;
      result: CallContractResult<null>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    deposit: {
      params: SignExecuteContractMethodParams<{
        pair: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    withdraw: {
      params: SignExecuteContractMethodParams<{
        pair: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    depositCollateral: {
      params: SignExecuteContractMethodParams<{
        pair: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    borrow: {
      params: SignExecuteContractMethodParams<{
        pair: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    repay: {
      params: SignExecuteContractMethodParams<{
        pair: HexString;
        path: HexString;
        amount: bigint;
      }>;
      result: SignExecuteScriptTxResult;
    };
    liquidate: {
      params: SignExecuteContractMethodParams<{
        pair: HexString;
        path: HexString;
      }>;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  PoolFactoryInstance,
  PoolFactoryTypes.Fields
> {
  encodeFields(fields: PoolFactoryTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  eventIndex = {
    Deposit: 0,
    Withdraw: 1,
    CollateralAdded: 2,
    Borrow: 3,
    Repay: 4,
    Liquidate: 5,
  };

  at(address: string): PoolFactoryInstance {
    return new PoolFactoryInstance(address);
  }

  tests = {
    deposit: async (
      params: TestContractParamsWithoutMaps<
        PoolFactoryTypes.Fields,
        { pair: HexString; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "deposit", params, getContractByCodeHash);
    },
    withdraw: async (
      params: TestContractParamsWithoutMaps<
        PoolFactoryTypes.Fields,
        { pair: HexString; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "withdraw", params, getContractByCodeHash);
    },
    depositCollateral: async (
      params: TestContractParamsWithoutMaps<
        PoolFactoryTypes.Fields,
        { pair: HexString; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(
        this,
        "depositCollateral",
        params,
        getContractByCodeHash
      );
    },
    borrow: async (
      params: TestContractParamsWithoutMaps<
        PoolFactoryTypes.Fields,
        { pair: HexString; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "borrow", params, getContractByCodeHash);
    },
    repay: async (
      params: TestContractParamsWithoutMaps<
        PoolFactoryTypes.Fields,
        { pair: HexString; path: HexString; amount: bigint }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "repay", params, getContractByCodeHash);
    },
    liquidate: async (
      params: TestContractParamsWithoutMaps<
        PoolFactoryTypes.Fields,
        { pair: HexString; path: HexString }
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "liquidate", params, getContractByCodeHash);
    },
  };

  stateForTest(
    initFields: PoolFactoryTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const PoolFactory = new Factory(
  Contract.fromJson(
    PoolFactoryContractJson,
    "",
    "af638672f9539a8b6f9479271b979387f447b8f025ecd4fd181a02d792382401",
    AllStructs
  )
);
registerContract(PoolFactory);

// Use this class to interact with the blockchain
export class PoolFactoryInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<PoolFactoryTypes.State> {
    return fetchContractState(PoolFactory, this);
  }

  async getContractEventsCurrentCount(): Promise<number> {
    return getContractEventsCurrentCount(this.address);
  }

  subscribeDepositEvent(
    options: EventSubscribeOptions<PoolFactoryTypes.DepositEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PoolFactory.contract,
      this,
      options,
      "Deposit",
      fromCount
    );
  }

  subscribeWithdrawEvent(
    options: EventSubscribeOptions<PoolFactoryTypes.WithdrawEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PoolFactory.contract,
      this,
      options,
      "Withdraw",
      fromCount
    );
  }

  subscribeCollateralAddedEvent(
    options: EventSubscribeOptions<PoolFactoryTypes.CollateralAddedEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PoolFactory.contract,
      this,
      options,
      "CollateralAdded",
      fromCount
    );
  }

  subscribeBorrowEvent(
    options: EventSubscribeOptions<PoolFactoryTypes.BorrowEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PoolFactory.contract,
      this,
      options,
      "Borrow",
      fromCount
    );
  }

  subscribeRepayEvent(
    options: EventSubscribeOptions<PoolFactoryTypes.RepayEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PoolFactory.contract,
      this,
      options,
      "Repay",
      fromCount
    );
  }

  subscribeLiquidateEvent(
    options: EventSubscribeOptions<PoolFactoryTypes.LiquidateEvent>,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvent(
      PoolFactory.contract,
      this,
      options,
      "Liquidate",
      fromCount
    );
  }

  subscribeAllEvents(
    options: EventSubscribeOptions<
      | PoolFactoryTypes.DepositEvent
      | PoolFactoryTypes.WithdrawEvent
      | PoolFactoryTypes.CollateralAddedEvent
      | PoolFactoryTypes.BorrowEvent
      | PoolFactoryTypes.RepayEvent
      | PoolFactoryTypes.LiquidateEvent
    >,
    fromCount?: number
  ): EventSubscription {
    return subscribeContractEvents(
      PoolFactory.contract,
      this,
      options,
      fromCount
    );
  }

  view = {
    deposit: async (
      params: PoolFactoryTypes.CallMethodParams<"deposit">
    ): Promise<PoolFactoryTypes.CallMethodResult<"deposit">> => {
      return callMethod(
        PoolFactory,
        this,
        "deposit",
        params,
        getContractByCodeHash
      );
    },
    withdraw: async (
      params: PoolFactoryTypes.CallMethodParams<"withdraw">
    ): Promise<PoolFactoryTypes.CallMethodResult<"withdraw">> => {
      return callMethod(
        PoolFactory,
        this,
        "withdraw",
        params,
        getContractByCodeHash
      );
    },
    depositCollateral: async (
      params: PoolFactoryTypes.CallMethodParams<"depositCollateral">
    ): Promise<PoolFactoryTypes.CallMethodResult<"depositCollateral">> => {
      return callMethod(
        PoolFactory,
        this,
        "depositCollateral",
        params,
        getContractByCodeHash
      );
    },
    borrow: async (
      params: PoolFactoryTypes.CallMethodParams<"borrow">
    ): Promise<PoolFactoryTypes.CallMethodResult<"borrow">> => {
      return callMethod(
        PoolFactory,
        this,
        "borrow",
        params,
        getContractByCodeHash
      );
    },
    repay: async (
      params: PoolFactoryTypes.CallMethodParams<"repay">
    ): Promise<PoolFactoryTypes.CallMethodResult<"repay">> => {
      return callMethod(
        PoolFactory,
        this,
        "repay",
        params,
        getContractByCodeHash
      );
    },
    liquidate: async (
      params: PoolFactoryTypes.CallMethodParams<"liquidate">
    ): Promise<PoolFactoryTypes.CallMethodResult<"liquidate">> => {
      return callMethod(
        PoolFactory,
        this,
        "liquidate",
        params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    deposit: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"deposit">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"deposit">> => {
      return signExecuteMethod(PoolFactory, this, "deposit", params);
    },
    withdraw: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"withdraw">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"withdraw">> => {
      return signExecuteMethod(PoolFactory, this, "withdraw", params);
    },
    depositCollateral: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"depositCollateral">
    ): Promise<
      PoolFactoryTypes.SignExecuteMethodResult<"depositCollateral">
    > => {
      return signExecuteMethod(PoolFactory, this, "depositCollateral", params);
    },
    borrow: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"borrow">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"borrow">> => {
      return signExecuteMethod(PoolFactory, this, "borrow", params);
    },
    repay: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"repay">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"repay">> => {
      return signExecuteMethod(PoolFactory, this, "repay", params);
    },
    liquidate: async (
      params: PoolFactoryTypes.SignExecuteMethodParams<"liquidate">
    ): Promise<PoolFactoryTypes.SignExecuteMethodResult<"liquidate">> => {
      return signExecuteMethod(PoolFactory, this, "liquidate", params);
    },
  };
}
