Contract PoolFactory (
    treasury: Address,
    poolTemplate: ByteVec
) {
    // events
    event PoolCreated(contractId: ByteVec, token: ByteVec)

    // enums

    @using(checkExternalCaller = true, updateFields = true, assetsInContract = true)
    pub fn createPool(
        token: ByteVec,
        tokenDecimals: U256,
        name: ByteVec,
        symbol: ByteVec
    ) -> Address {
        // Only governance can create new pools
        checkCaller!(callerAddress!() == admin, 2)
        
        // Check if pool already exists for this token
        
        // Encode pool creation parameters
        let (encodedImmFields, encodedMutFields) = Pool.encodeFields!(
            treasury,                // Registry
            token,                   // Token ID
            tokenDecimals,           // Decimals
            name,                    // Pool name
            symbol,                  // Pool symbol
            0,                       // sTokenSupply
            1000000000000000000,     // exchangeRate (1.0 in 1e18 precision)
            0,                       // totalPoolAssets
            0,                       // depositedAmount
            0,                       // totalBorrowed
            0,                       // reserves
            blockTimeStamp!(),       // lastUpdateTimestamp
            true                     // borrowingEnabled
        )
        
        // Create pool contract
        let poolAddress = createContract!{callerAddress!() -> ALPH : minimalContractDeposit!() * 2}(
            poolTemplate, 
            encodedImmFields, 
            encodedMutFields
        )
        
        // emit pool created
    }
}