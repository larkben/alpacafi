Contract LoanMarket (
    creator: Address,
    token: ByteVec,
    mut tokenAmount: U256,
    // specs
    mut minTokenAmount: U256,
    mut minInterest: U256,
    mut maxTime: U256,
    mut liquidation: Bool,
    // collateral
    mut collateralRatioRequired: Bool,
    mut ratioRequired: U256,
    parentContract: Address
) {
    pub fn getLoaneeTokenDetails() -> (ByteVec, U256) {
        return token, tokenAmount
    }

    pub fn getLoaneeDetails() -> (Address, U256, U256, U256, Bool) {
        return creator, minTokenAmount, minInterest, maxTime, liquidation
    }

    pub fn getCollateralDetails() -> (Bool, U256) {
        return collateralRatioRequired, ratioRequired
    }

    // edit market values
    @using(checkExternalCaller = true, updateFields = true)
    pub fn editMarketValues(caller: Address, newMinAmount: U256, newInterest: U256, newTime: U256, canBeLiq: Bool, collateral: Bool, ratio: U256) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        assert!(caller == creator, 1)

        collateralRatioRequired = collateral
        ratioRequired = ratio
        minTokenAmount = newMinAmount
        minInterest = newInterest
        maxTime = newTime
        liquidation = canBeLiq
    }

    // delegate
    @using(checkExternalCaller = true, updateFields = true, preapprovedAssets = false, assetsInContract = true)
    pub fn delegate(caller: Address, amount: U256) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        assert!(amount < tokenAmount, 4)

        transferToken!(selfAddress!(), caller, token, tokenAmount)
        transferToken!(selfAddress!(), caller, ALPH, dustAmount!())

        tokenAmount = tokenAmount - amount
    }

    @using(checkExternalCaller = true, updateFields = true, preapprovedAssets = true, assetsInContract = true)
    pub fn add(caller: Address, amount: U256, gas: Bool) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        assert!(caller == creator, 1)

        transferToken!(caller, selfAddress!(), token, amount)
        transferToken!(caller, selfAddress!(), ALPH, dustAmount!())

        if (gas) {
            transferToken!(caller, selfAddress!(), ALPH, minimalContractDeposit!())
        }

        tokenAmount = tokenAmount + amount
    }

    @using(checkExternalCaller = true, updateFields = true, preapprovedAssets = false, assetsInContract = true)
    pub fn withdraw(caller: Address, amount: U256) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        assert!(caller == creator, 1)

        transferToken!(selfAddress!(), caller, token, amount)
        transferToken!(selfAddress!(), caller, ALPH, dustAmount!())

        tokenAmount = tokenAmount - amount
    }

    @using(checkExternalCaller = true, updateFields = false, preapprovedAssets = false, assetsInContract = true)
    pub fn destroy(caller: Address) -> () {
        checkCaller!(callerAddress!() == parentContract, 0)

        assert!(caller == creator, 1)

        destroySelf!(creator)
    }

    @using(checkExternalCaller = false, assetsInContract = true)
    pub fn forceCancel() -> () {
        checkCaller!(callerAddress!() == creator, 5)

        destroySelf!(creator)
    }

    // upgrade
    @using(updateFields = false, checkExternalCaller = true)
    pub fn updateMarketCode(newCode: ByteVec) -> () {
        checkCaller!(callerAddress!() == parentContract, 9)

        // add addtional security param -> would stop parentContract / factory updates
        assert!(creator == parentContract, 10)

        migrate!(newCode)
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn updateMarketFields(newCode: ByteVec, immFields: ByteVec, mutFields: ByteVec) -> () {
        checkCaller!(callerAddress!() == parentContract, 9)

        // add addtional security param -> would stop parentContract / factory updates
        assert!(creator == parentContract, 10)

        migrateWithFields!(newCode, immFields, mutFields)
    } 
}

TxScript ForceCancelMarket (
    loan: Loan
) {
    loan.forceCancel()
}

// add force cancel

TxScript UpdateMarketCode (
    market: LoanMarket,
    newCode: ByteVec
) {
    market.updateMarketCode(newCode)
}

TxScript UpdateMarketFields (
    market: LoanMarket,
    newCode: ByteVec, 
    immFields: ByteVec, 
    mutFields: ByteVec
) {
    market.updateMarketFields(newCode, immFields, mutFields)
}