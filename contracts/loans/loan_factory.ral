struct PairInfo {
    // need to have decimals for liquidation
    pair: ByteVec,
    mut decimals: U256 
}

struct DIAOracleValue {
    mut value: U256,
    mut timestamp: U256
}
  
Interface IDIAOracle {
    pub fn getValue(key: ByteVec) -> DIAOracleValue
}

Contract LoanFactory (
    admin: Address,
    loanTemplate: ByteVec,
    marketTemplate: ByteVec,
    mut activeLoans: U256,
    mut rate: U256,
    oracle: IDIAOracle,
    alpaca: ByteVec
) {
    // price mappings
    mapping [ByteVec, PairInfo] tokenPairs

    // events
    event NewLoan (
        contract: ByteVec, 
        tokenRequested: ByteVec, 
        tokenAmount: U256, 
        collateralToken: ByteVec, 
        collateralAmount: U256, 
        interest: U256, 
        duration: U256, 
        who: Address
    )

    event AcceptedLoan (
        contract: ByteVec, 
        who: Address
    )

    event LoanRemoved (
        contract: ByteVec, 
        who: Address
    )

    event LoanWithdraw (
        contract: ByteVec, 
        forfeit: Bool, 
        who: Address
    )

    event AddCollateralLoan (
        contract: ByteVec, 
        who: Address, 
        token: ByteVec, 
        amount: U256
    )

    event RemoveCollateralLoan (
        contract: ByteVec, 
        who: Address, 
        token: ByteVec, 
        amount: U256
    )

    event LoanLiquidation (
        contract: ByteVec, 
        token: ByteVec, 
        startingBid: U256
    )

    event AuctionRedeem (
        contract: ByteVec, 
        who: Address
    )

    event AuctionBid(
        contract: ByteVec, 
        who: Address, 
        amount: U256
    )

    enum LoanCodes {
        NotAdmin = 0
        TokenSizeTooSmall = 1
    }

    // health / collateral value calculation
    fn determineCollateralRatio(
        tokenRequested: ByteVec,
        tokenAmount: U256,
        tokenOracle: Bool,
        collateralToken: ByteVec, 
        collateralAmount: U256,
        collateralOracle: Bool,
        threshhold: U256
    ) -> (U256, Bool) {
        if (tokenPairs.contains!(tokenRequested) == true && tokenPairs.contains!(collateralToken)) {
            let mut loanValue = 0
            let mut collateralValue = 0

            // fetch token price
            if (tokenOracle) {
                loanValue = oracle.getValue(tokenPairs[tokenRequested].pair).value
            }
            else {
                loanValue = AlpacaFiOracle(alpaca).getValue(tokenPairs[tokenRequested].pair).value
            }

            // fetch collateral price
            if (collateralOracle) {
                collateralValue = oracle.getValue(tokenPairs[collateralToken].pair).value
            }
            else {
                collateralValue = AlpacaFiOracle(alpaca).getValue(tokenPairs[collateralToken].pair).value
            }

            if (loanValue == 0 || collateralValue == 0) {
                return 0, false
            }

            let collateralDecimals = tokenPairs[collateralToken].decimals
            let tokenDecimals = tokenPairs[tokenRequested].decimals

            // Normalize collateral amount to 18 decimals
            let collateralNormalized = (collateralAmount * (10 |**| 18)) / (10 |**| collateralDecimals)
            let collateralValueUSD = (collateralNormalized * collateralValue) / (10 |**| 8) // Remove 8 decimals

            // Normalize loan amount to 18 decimals
            let loanNormalized = (tokenAmount * (10 |**| 18)) / (10 |**| tokenDecimals)
            let loanValueUSD = (loanNormalized * loanValue) / (10 |**| 8) // Remove 8 decimals

            // Compute collateral-to-loan ratio in basis points (10000 = 100%)
            let ratio = (collateralValueUSD * 10000) / loanValueUSD // Multiply before division to avoid precision loss

            if (ratio > threshhold) {
                return ratio, true
            }

            else {
                return ratio, false
            }
        }

        return 0, false
    }

    pub fn getRequiredTokens(contractId: ByteVec, withInterest: Bool) -> (ByteVec, U256) {
        let loan = Loan(contractId)

        let (token, amount) = loan.getTokenRequested()

        if (withInterest) {
            let interestTotal = loan.getInterest()

            return token, interestTotal
        }
        else {
            return token, amount
        }
    }

    fn checkTokenAmount(priceIn: U256, commissionRateIn: U256) -> () {
        // Calculate the commission based on the rate
        let commission = (priceIn * commissionRateIn) / 10000

        // Ensure the token amount is sufficient
        assert!(priceIn > commission, LoanCodes.TokenSizeTooSmall)

        // Additional optional check for a minimum base token amount
        assert!(priceIn >= 1000, LoanCodes.TokenSizeTooSmall)
    }

    // create loans (creator)
    // ---------------------------------------------------------------------------------------
    @using(checkExternalCaller = false, preapprovedAssets = true, updateFields = true)
    pub fn createLoan(
        tokenRequested: ByteVec, 
        tokenAmount: U256,
        tokenOracle: Bool, 
        collateralToken: ByteVec, 
        collateralAmount: U256,
        collateralOracle: Bool,
        interest: U256, 
        duration: U256,
        canLiquidate: Bool
    ) -> () {
        let caller = callerAddress!()

        checkTokenAmount(tokenAmount, rate)

        // need a solution for un-supported oracle tokens
        let (ratio, condition) = determineCollateralRatio(
            tokenRequested, 
            tokenAmount,
            tokenOracle,
            collateralToken, 
            collateralAmount, 
            collateralOracle,
            15000 // 150%
        )

        // collateral is over 150 %
        if (canLiquidate) {
            assert!(condition == true, 2)
        }

        let (encodeImmutableFields, encodeMutableFields) = Loan.encodeFields!(
            caller,
            nullContractAddress!(),
            tokenRequested,
            tokenAmount,
            // collateral
            collateralToken,
            collateralAmount,
            interest,
            rate,
            duration,
            0,
            false,
            selfAddress!(),
            canLiquidate,
            false,
            ratio,
            nullContractAddress!(),
            tokenAmount,
            0
        )

        let contractID = copyCreateContract!{caller -> ALPH: (minimalContractDeposit!() * 2), collateralToken: collateralAmount}(
            loanTemplate,                                                                                  
            encodeImmutableFields,
            encodeMutableFields
        )

        activeLoans = activeLoans + 1

        // emit event
        emit NewLoan(contractID, tokenRequested, tokenAmount, collateralToken, collateralAmount, interest, duration, caller)
    }

    @using(checkExternalCaller = false, preapprovedAssets = false, updateFields = false)
    pub fn acceptMarket() -> () {
        assert!(callerAddress!() != admin, 0)

        assert!(encodeToByteVec!(admin) != marketTemplate, 1)
    }

    @using(checkExternalCaller = false, preapprovedAssets = true)
    pub fn accept(contractId: ByteVec, tokenOracle: Bool, collateralOracle: Bool) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        let (token, tokenAmount) = loan.getTokenRequested()
        let (collateral, collateralAmount) = loan.getTokenCollateral()

        let (ratio, condition) = determineCollateralRatio(
            token, 
            tokenAmount,
            tokenOracle,
            collateral, 
            collateralAmount, 
            collateralOracle,
            15000
        )

        // loan should be in good standing to be accepted

        if (loan.canLoanLiquidate() == true) {
            assert!(condition == true, 8)
        }

        loan.acceptLoan{caller -> token: tokenAmount}(caller, ratio)

        // emit event
        emit AcceptedLoan(contractId, caller)
    }

    @using(checkExternalCaller = false, preapprovedAssets = false)
    pub fn cancel(contractId: ByteVec) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        loan.cancelLoan(caller)

        // emit event
        emit LoanRemoved(contractId, caller)
    }

    @using(checkExternalCaller = false, preapprovedAssets = true, assetsInContract = enforced)
    pub fn pay(contractId: ByteVec) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        let (token, amount) = loan.getTokenRequested()
        let totalAmount = loan.getInterest()

        loan.payLoan{caller -> token: totalAmount, ALPH: dustAmount!() * 2}(caller)

        // emit event
        emit LoanWithdraw(contractId, false, caller)
    }
    
    // liquidation
    @using(checkExternalCaller = false, preapprovedAssets = false, assetsInContract = enforced)
    pub fn forfeit(contractId: ByteVec) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        //let (token, amount) = loan.getTokenCollateral()

        loan.acceptForfeit()

        // emit event
        emit LoanWithdraw(contractId, true, caller)
    }

    // check liquidation
    @using(checkExternalCaller = false, updateFields = false)
    pub fn liquidation(contractId: ByteVec, tokenOracle: Bool, collateralOracle: Bool) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        let (token, tokenAmount) = loan.getTokenRequested()
        let (collateral, collateralAmount) = loan.getTokenCollateral()

        let (ratio, condition) = determineCollateralRatio(
            token, 
            tokenAmount,
            tokenOracle,
            collateral, 
            collateralAmount, 
            collateralOracle,
            15000
        )

        assert!(condition == true, 8)

        loan.activateLiquidation(ratio)

        emit LoanLiquidation(contractId, token, tokenAmount)
    }

    // auction functions
    @using(checkExternalCaller = false, updateFields = false, preapprovedAssets = true)
    pub fn bid(contractId: ByteVec, bidAmount: U256) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        let (token, _) = loan.getTokenRequested()
        
        let highestBid = loan.getHighestBid()

        assert!(bidAmount > highestBid, 9)

        let timeEnd = loan.bid{caller -> token: bidAmount, ALPH: dustAmount!()}(caller, bidAmount)

        // ... emit liquidation
        emit AuctionBid(contractId, caller, bidAmount)
    }

    @using(checkExternalCaller = false, updateFields = false, preapprovedAssets = false, assetsInContract = enforced)
    pub fn redeem(contractId: ByteVec) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        loan.redeem(caller)

        emit AuctionRedeem(contractId, caller)
    }

    // add collateral function
    @using(checkExternalCaller = false, updateFields = false, preapprovedAssets = true)
    pub fn addCollateral(contractId: ByteVec, amount: U256, tokenOracle: Bool, collateralOracle: Bool) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        let (token, tokenAmount) = loan.getTokenRequested()
        let (collateral, collateralAmount) = loan.getTokenCollateral()

        let (ratio, _) = determineCollateralRatio(
            token, 
            tokenAmount,
            tokenOracle,
            collateral, 
            collateralAmount + amount, 
            collateralOracle,
            0
        )

        let _ = loan.addCollateral{caller -> collateral: amount}(caller, amount, ratio)

        emit AddCollateralLoan(contractId, caller, collateral, collateralAmount + amount)
    }

    @using(checkExternalCaller = false, preapprovedAssets = false, updateFields = false)
    pub fn loaneeMarket() -> () {
        assert!(callerAddress!() != admin, 0)
    }

    // update loanee market -> simplify
    @using(checkExternalCaller = false, updateFields = false, preapprovedAssets = false)
    pub fn editMarketValues() -> () {
        assert!(callerAddress!() != admin, 0)
    }

    @using(checkExternalCaller = false, updateFields = false, preapprovedAssets = false, assetsInContract = false)
    pub fn addFunds() -> () {
        assert!(callerAddress!() != admin, 0)
    }

    @using(checkExternalCaller = false, updateFields = false, preapprovedAssets = false, assetsInContract = false)
    pub fn withdrawFunds() -> () {
        assert!(callerAddress!() != admin, 0)
    }

    @using(checkExternalCaller = false, updateFields = false, preapprovedAssets = false)
    pub fn destroyMarket() -> () {
        assert!(callerAddress!() != admin, 0)
    }

    // admin functions
    // --------------------------------------------------------------------------------------
    @using(checkExternalCaller = true, preapprovedAssets = false, updateFields = true)
    pub fn editRate(newRate: U256) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        rate = newRate
    }

    // ... complete this
    @using(checkExternalCaller = true, preapprovedAssets = true, updateFields = false)
    pub fn tokenMapping(token: ByteVec, add: Bool, pairtoken: ByteVec, decimals: U256) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        if (add) {
            let b = PairInfo {
                pair: pairtoken,
                decimals: decimals
            }

            tokenPairs.insert!(callerAddress!(), token, b)
        }
        else {
            tokenPairs.remove!(callerAddress!(), token)
        }
    }

    // dead Function
    pub fn destroyLoanFactory() -> () {
        assert!(callerAddress!() != admin, 1)
    }

    // withdraw fees
    @using(checkExternalCaller = true, preapprovedAssets = false, updateFields = false, assetsInContract = true)
    pub fn withdrawLoanFactoryFees(who: Address, token: ByteVec, amount: U256) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        transferToken!(selfAddress!(), who, token, amount)

        // emit event
    }

    // upgrade
    @using(updateFields = false, checkExternalCaller = true)
    pub fn updateLoanFactoryCode(newCode: ByteVec) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        migrate!(newCode)
    }

    @using(updateFields = true, checkExternalCaller = true)
    pub fn updateLoanFactoryFields(newCode: ByteVec, immFields: ByteVec, mutFields: ByteVec) -> () {
        checkCaller!(callerAddress!() == admin, LoanCodes.NotAdmin)

        migrateWithFields!(newCode, immFields, mutFields)
    } 

    // dead function
    pub fn upgradeContract() -> () {
        assert!(callerAddress!() != admin, 1)
    }

    // removeCollateral from loan
    @using(checkExternalCaller = false, updateFields = false, preapprovedAssets = false, assetsInContract = enforced)
    pub fn removeCollateral(contractId: ByteVec, amount: U256, tokenOracle: Bool, collateralOracle: Bool) -> () {
        let loan = Loan(contractId)

        let caller = callerAddress!()

        let (token, tokenAmount) = loan.getTokenRequested()
        let (collateral, collateralAmount) = loan.getTokenCollateral()

        let (ratio, _) = determineCollateralRatio(
            token, 
            tokenAmount,
            tokenOracle,
            collateral, 
            collateralAmount - amount, // remove collateral and perform calculation
            collateralOracle,
            0
        )

        assert!(ratio > 15000, 1) // prevent falling into liquidation

        let _ = loan.removeCollateral(caller, amount, ratio)

        emit RemoveCollateralLoan(contractId, caller, collateral, collateralAmount - amount)
    }
}

TxScript CreateLoan (
    loanFactory: LoanFactory,
    tokenRequested: ByteVec,
    tokenAmount: U256,
    tokenOracle: Bool,
    collateralToken: ByteVec,
    collateralAmount: U256,
    collateralOracle: Bool,
    interest: U256,
    duration: U256,
    canLiquidate: Bool
) {
    loanFactory.createLoan{callerAddress!() -> ALPH: (minimalContractDeposit!() * 2), collateralToken: collateralAmount}(
        tokenRequested,
        tokenAmount,
        tokenOracle,
        collateralToken,
        collateralAmount,
        collateralOracle,
        interest,
        duration,
        canLiquidate
    )
}

TxScript AcceptLoan (
    loanFactory: LoanFactory,
    contract: ByteVec,
    tokenOracle: Bool,
    collateralOracle: Bool
) {
    let (token, amount) = loanFactory.getRequiredTokens(contract, false)

    loanFactory.accept{callerAddress!() -> token: amount}(contract, tokenOracle, collateralOracle)
}

TxScript CancelLoan (
    loanFactory: LoanFactory,
    contract: ByteVec
) {
    loanFactory.cancel(contract)
}

TxScript PayLoan (
    loanFactory: LoanFactory,
    contract: ByteVec
) {
    let (token, amount) = loanFactory.getRequiredTokens(contract, true)

    loanFactory.pay{callerAddress!() -> token: amount, ALPH: dustAmount!() * 2}(contract)
}

TxScript ForfeitLoan (
    loanFactory: LoanFactory,
    contract: ByteVec
) {
    loanFactory.forfeit(contract)
}

// liquidation and auctions

TxScript AddCollateral (
    loanFactory: LoanFactory,
    contractId: ByteVec, 
    amount: U256, 
    tokenOracle: Bool, 
    collateralOracle: Bool
) {
    let (token, _) = Loan(contractId).getTokenCollateral()

    loanFactory.addCollateral{callerAddress!() -> token: amount}(contractId, amount, tokenOracle, collateralOracle)
}

TxScript RemoveCollateral (
    loanFactory: LoanFactory,
    contractId: ByteVec, 
    amount: U256, 
    tokenOracle: Bool, 
    collateralOracle: Bool
) {
    let (token, _) = Loan(contractId).getTokenCollateral()

    loanFactory.removeCollateral(contractId, amount, tokenOracle, collateralOracle)
}

TxScript LiquidationLoan (
    loanFactory: LoanFactory,
    contract: ByteVec,
    tokenOracle: Bool,
    collateralOracle: Bool
) {
    loanFactory.liquidation(contract, tokenOracle, collateralOracle)
}

TxScript BidLoan (
    loanFactory: LoanFactory,
    contract: ByteVec,
    bidAmount: U256,
    token: ByteVec
) {
    loanFactory.bid{callerAddress!() -> token: bidAmount, ALPH: dustAmount!()}(contract, bidAmount)
}

TxScript RedeemLoan (
    loanFactory: LoanFactory,
    contract: ByteVec
) {
    loanFactory.redeem(contract)
}

// admin

TxScript EditLoanRate (
    loanFactory: LoanFactory,
    newRate: U256
) {
    loanFactory.editRate(newRate)
}

TxScript WithdrawLoanFactoryFees (
    loanFactory: LoanFactory,
    who: Address,
    token: ByteVec,
    amount: U256
) {
    loanFactory.withdrawLoanFactoryFees(who, token, amount)
}

TxScript TokenMapping (
    loanFactory: LoanFactory,
    token: ByteVec, 
    add: Bool,
    pairtoken: ByteVec,
    decimals: U256
) {
    loanFactory.tokenMapping{callerAddress!() -> ALPH: mapEntryDeposit!()}(token, add, pairtoken, decimals)
}

// upgrade / destroy

TxScript UpdateLoanFactoryCode (
    loanFactory: LoanFactory,
    newCode: ByteVec
) {
    loanFactory.updateLoanFactoryCode(newCode)
}

TxScript UpdateLoanFactoryFields (
    loanFactory: LoanFactory,
    newCode: ByteVec, 
    immFields: ByteVec, 
    mutFields: ByteVec
) {
    loanFactory.updateLoanFactoryFields(newCode, immFields, mutFields)
}

