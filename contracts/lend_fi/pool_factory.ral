Contract LendingPoolFactory (
	admin: Address,
	feeTemplate: ByteVec,
	lendingPoolTemplate: ByteVec,
	lendingAsset: ByteVec,
	fee: U256,
	oracle: IDIAOracle,
	alpaca: ByteVec		// possibly address
) {
	// determine collateral ratio function
	
	// determine collateral amount needed function
	
	// mapping(s) | token support | fee support
		// implement
		
	// create lending pool
	
	// -----------------------
	
	// update admin
	
	// update fee
	
	// upgrade functions
}

struct Tokens {
	lendingAssetAcc: ByteVec,
	mut maxLend: U256,
	mut lendingRate: U256
}

Contract LendingPool (
	owner: Address,
	lendingAsset: ByteVec, // this is an asset storage contract
	debtTemplate: ByteVec,
	loansActive: U256,
	// params
	maxTime: U256,
) {
	mapping [ByteVec, ByteVec] tokens
	// max tokens per loan defined in mapping -> create struct [X]
	
	
}

// Asset Storage Contract

Contract LendingAsset (
	parent: Address,
	amount: U256
) {
	// fund loan request
	
	// topup
	
	// withdraw
}
