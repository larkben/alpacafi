import "std/nft_collection_interface"

struct Asset {
    token: ByteVec,
    mut amount: U256
}

struct Assets {
    mut portfolio: [Asset; 20]  // 10 assets
}

Contract CollateralAccounts (
    admin: Address,
    mut collectionUri: ByteVec,
    collateralTemplate: ByteVec,
    mut totalSupply: U256, 
    mut baseUri: ByteVec
) implements INFTCollection {
    mapping [ByteVec, Assets] account

    event AccountCreated(minter: Address, index: U256, contract: ByteVec)
    event AccountRemoved(minter: Address, index: U256, contract: ByteVec)
    event AccountAssetAdded(minter: Address, contractId: ByteVec, asset: ByteVec, amount: U256)
    event AccountAssetRemoved(minter: Address, contractId: ByteVec, asset: ByteVec, amount: U256)

    enum ErrorCodes {
        NFTNotFound = 0
        CollectionOwnerAllowedOnly = 1
        NFTNotPartOfCollection = 2
        NotValidNFT = 3
        NotAdmin = 4
    }

    // base uri
    pub fn getCollectionUri() -> ByteVec {
        return collectionUri
    }

    // total supply at runtime
    pub fn totalSupply() -> U256 {
        return totalSupply
    }

    // get the nft by index
    @using(checkExternalCaller = false)
    pub fn nftByIndex(index: U256) -> INFT {
        let nftTokenId = subContractId!(toByteVec!(index))
        assert!(contractExists!(nftTokenId), ErrorCodes.NFTNotFound)

        return INFT(nftTokenId)
    }

    // validation ? ~ not being used
    @using(checkExternalCaller = false)
    pub fn validateNFT(nftId: ByteVec, index: U256) -> () {
      let expectedTokenContract = nftByIndex(index)
      assert!(nftId == contractId!(expectedTokenContract), ErrorCodes.NFTNotPartOfCollection)
    }

    @using(checkExternalCaller = true, updateFields = true)
    pub fn editBaseUri(newUri: ByteVec) -> () {
        checkCaller!(admin == callerAddress!(), ErrorCodes.NotAdmin)

        collectionUri = newUri
    }

    @using(checkExternalCaller = true, updateFields = true)
    pub fn editCollectionUri(newUri: ByteVec) -> () {
        checkCaller!(admin == callerAddress!(), ErrorCodes.NotAdmin)

        baseUri = newUri
    }

    // create collateral account nft for management
    @using(preapprovedAssets = true, checkExternalCaller = false, updateFields = true)
    pub fn createAccount() -> () {

        let caller = callerAddress!()
        let nftUri = baseUri

        let (encodeImmutableFields, encodeMutableFields) = CollateralAccountNFT.encodeFields!(totalSupply(), nftUri, selfContractId!())

        let contractId = copyCreateSubContractWithToken!{callerAddress!() -> ALPH: minimalContractDeposit!()}(
            toByteVec!(totalSupply()),
            collateralTemplate,
            encodeImmutableFields,
            encodeMutableFields,
            1,
            callerAddress!()
        )

        totalSupply = totalSupply + 1

        // create the mapping 
        let n = Asset { token: b``, amount: 0}
        let b = Assets {
            portfolio: [n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n, n]
        }

        account.insert!(caller, contractId, b) // created mapping

        emit AccountCreated(callerAddress!(), totalSupply(), contractId)
    }
    
    // collateral and account management
    // ------------------------------------

    // should burn the nft | refund the assets | remove the mapping
    pub fn burnAccountNFT() -> () {
        // code ...
    }

    pub fn addAsset(nft: ByteVec, token: ByteVec, amount: U256) -> () {
        // code ...
    }

    pub fn removeAsset(nft: ByteVec, token: ByteVec, amount: U256) -> () {
        // code ...
    }

    pub fn payCollateral(nft: ByteVec, token: ByteVec, amount: U256) -> () {
        // code ...
    } 
}